
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `SocialAccount` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model SocialAccount
 * 
 */
export type SocialAccountModel = runtime.Types.Result.DefaultSelection<Prisma.$SocialAccountPayload>

export type AggregateSocialAccount = {
  _count: SocialAccountCountAggregateOutputType | null
  _avg: SocialAccountAvgAggregateOutputType | null
  _sum: SocialAccountSumAggregateOutputType | null
  _min: SocialAccountMinAggregateOutputType | null
  _max: SocialAccountMaxAggregateOutputType | null
}

export type SocialAccountAvgAggregateOutputType = {
  version: number | null
}

export type SocialAccountSumAggregateOutputType = {
  version: number | null
}

export type SocialAccountMinAggregateOutputType = {
  id: string | null
  isActive: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
  version: number | null
  provider: $Enums.SocialAccountProvider | null
  providerId: string | null
  accountId: string | null
}

export type SocialAccountMaxAggregateOutputType = {
  id: string | null
  isActive: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
  version: number | null
  provider: $Enums.SocialAccountProvider | null
  providerId: string | null
  accountId: string | null
}

export type SocialAccountCountAggregateOutputType = {
  id: number
  isActive: number
  createdAt: number
  updatedAt: number
  version: number
  provider: number
  providerId: number
  accountId: number
  _all: number
}


export type SocialAccountAvgAggregateInputType = {
  version?: true
}

export type SocialAccountSumAggregateInputType = {
  version?: true
}

export type SocialAccountMinAggregateInputType = {
  id?: true
  isActive?: true
  createdAt?: true
  updatedAt?: true
  version?: true
  provider?: true
  providerId?: true
  accountId?: true
}

export type SocialAccountMaxAggregateInputType = {
  id?: true
  isActive?: true
  createdAt?: true
  updatedAt?: true
  version?: true
  provider?: true
  providerId?: true
  accountId?: true
}

export type SocialAccountCountAggregateInputType = {
  id?: true
  isActive?: true
  createdAt?: true
  updatedAt?: true
  version?: true
  provider?: true
  providerId?: true
  accountId?: true
  _all?: true
}

export type SocialAccountAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SocialAccount to aggregate.
   */
  where?: Prisma.SocialAccountWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SocialAccounts to fetch.
   */
  orderBy?: Prisma.SocialAccountOrderByWithRelationInput | Prisma.SocialAccountOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.SocialAccountWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SocialAccounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SocialAccounts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned SocialAccounts
  **/
  _count?: true | SocialAccountCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: SocialAccountAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: SocialAccountSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SocialAccountMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SocialAccountMaxAggregateInputType
}

export type GetSocialAccountAggregateType<T extends SocialAccountAggregateArgs> = {
      [P in keyof T & keyof AggregateSocialAccount]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSocialAccount[P]>
    : Prisma.GetScalarType<T[P], AggregateSocialAccount[P]>
}




export type SocialAccountGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SocialAccountWhereInput
  orderBy?: Prisma.SocialAccountOrderByWithAggregationInput | Prisma.SocialAccountOrderByWithAggregationInput[]
  by: Prisma.SocialAccountScalarFieldEnum[] | Prisma.SocialAccountScalarFieldEnum
  having?: Prisma.SocialAccountScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SocialAccountCountAggregateInputType | true
  _avg?: SocialAccountAvgAggregateInputType
  _sum?: SocialAccountSumAggregateInputType
  _min?: SocialAccountMinAggregateInputType
  _max?: SocialAccountMaxAggregateInputType
}

export type SocialAccountGroupByOutputType = {
  id: string
  isActive: boolean
  createdAt: Date
  updatedAt: Date
  version: number
  provider: $Enums.SocialAccountProvider
  providerId: string
  accountId: string
  _count: SocialAccountCountAggregateOutputType | null
  _avg: SocialAccountAvgAggregateOutputType | null
  _sum: SocialAccountSumAggregateOutputType | null
  _min: SocialAccountMinAggregateOutputType | null
  _max: SocialAccountMaxAggregateOutputType | null
}

type GetSocialAccountGroupByPayload<T extends SocialAccountGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SocialAccountGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SocialAccountGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SocialAccountGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SocialAccountGroupByOutputType[P]>
      }
    >
  >



export type SocialAccountWhereInput = {
  AND?: Prisma.SocialAccountWhereInput | Prisma.SocialAccountWhereInput[]
  OR?: Prisma.SocialAccountWhereInput[]
  NOT?: Prisma.SocialAccountWhereInput | Prisma.SocialAccountWhereInput[]
  id?: Prisma.StringFilter<"SocialAccount"> | string
  isActive?: Prisma.BoolFilter<"SocialAccount"> | boolean
  createdAt?: Prisma.DateTimeFilter<"SocialAccount"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"SocialAccount"> | Date | string
  version?: Prisma.IntFilter<"SocialAccount"> | number
  provider?: Prisma.EnumSocialAccountProviderFilter<"SocialAccount"> | $Enums.SocialAccountProvider
  providerId?: Prisma.StringFilter<"SocialAccount"> | string
  accountId?: Prisma.StringFilter<"SocialAccount"> | string
  account?: Prisma.XOR<Prisma.AccountScalarRelationFilter, Prisma.AccountWhereInput>
}

export type SocialAccountOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  version?: Prisma.SortOrder
  provider?: Prisma.SortOrder
  providerId?: Prisma.SortOrder
  accountId?: Prisma.SortOrder
  account?: Prisma.AccountOrderByWithRelationInput
}

export type SocialAccountWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  provider_providerId?: Prisma.SocialAccountProviderProviderIdCompoundUniqueInput
  AND?: Prisma.SocialAccountWhereInput | Prisma.SocialAccountWhereInput[]
  OR?: Prisma.SocialAccountWhereInput[]
  NOT?: Prisma.SocialAccountWhereInput | Prisma.SocialAccountWhereInput[]
  isActive?: Prisma.BoolFilter<"SocialAccount"> | boolean
  createdAt?: Prisma.DateTimeFilter<"SocialAccount"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"SocialAccount"> | Date | string
  version?: Prisma.IntFilter<"SocialAccount"> | number
  provider?: Prisma.EnumSocialAccountProviderFilter<"SocialAccount"> | $Enums.SocialAccountProvider
  providerId?: Prisma.StringFilter<"SocialAccount"> | string
  accountId?: Prisma.StringFilter<"SocialAccount"> | string
  account?: Prisma.XOR<Prisma.AccountScalarRelationFilter, Prisma.AccountWhereInput>
}, "id" | "provider_providerId">

export type SocialAccountOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  version?: Prisma.SortOrder
  provider?: Prisma.SortOrder
  providerId?: Prisma.SortOrder
  accountId?: Prisma.SortOrder
  _count?: Prisma.SocialAccountCountOrderByAggregateInput
  _avg?: Prisma.SocialAccountAvgOrderByAggregateInput
  _max?: Prisma.SocialAccountMaxOrderByAggregateInput
  _min?: Prisma.SocialAccountMinOrderByAggregateInput
  _sum?: Prisma.SocialAccountSumOrderByAggregateInput
}

export type SocialAccountScalarWhereWithAggregatesInput = {
  AND?: Prisma.SocialAccountScalarWhereWithAggregatesInput | Prisma.SocialAccountScalarWhereWithAggregatesInput[]
  OR?: Prisma.SocialAccountScalarWhereWithAggregatesInput[]
  NOT?: Prisma.SocialAccountScalarWhereWithAggregatesInput | Prisma.SocialAccountScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"SocialAccount"> | string
  isActive?: Prisma.BoolWithAggregatesFilter<"SocialAccount"> | boolean
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"SocialAccount"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"SocialAccount"> | Date | string
  version?: Prisma.IntWithAggregatesFilter<"SocialAccount"> | number
  provider?: Prisma.EnumSocialAccountProviderWithAggregatesFilter<"SocialAccount"> | $Enums.SocialAccountProvider
  providerId?: Prisma.StringWithAggregatesFilter<"SocialAccount"> | string
  accountId?: Prisma.StringWithAggregatesFilter<"SocialAccount"> | string
}

export type SocialAccountCreateInput = {
  id?: string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  version?: number
  provider: $Enums.SocialAccountProvider
  providerId: string
  account: Prisma.AccountCreateNestedOneWithoutSocial_accountsInput
}

export type SocialAccountUncheckedCreateInput = {
  id?: string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  version?: number
  provider: $Enums.SocialAccountProvider
  providerId: string
  accountId: string
}

export type SocialAccountUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  version?: Prisma.IntFieldUpdateOperationsInput | number
  provider?: Prisma.EnumSocialAccountProviderFieldUpdateOperationsInput | $Enums.SocialAccountProvider
  providerId?: Prisma.StringFieldUpdateOperationsInput | string
  account?: Prisma.AccountUpdateOneRequiredWithoutSocial_accountsNestedInput
}

export type SocialAccountUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  version?: Prisma.IntFieldUpdateOperationsInput | number
  provider?: Prisma.EnumSocialAccountProviderFieldUpdateOperationsInput | $Enums.SocialAccountProvider
  providerId?: Prisma.StringFieldUpdateOperationsInput | string
  accountId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type SocialAccountCreateManyInput = {
  id?: string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  version?: number
  provider: $Enums.SocialAccountProvider
  providerId: string
  accountId: string
}

export type SocialAccountUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  version?: Prisma.IntFieldUpdateOperationsInput | number
  provider?: Prisma.EnumSocialAccountProviderFieldUpdateOperationsInput | $Enums.SocialAccountProvider
  providerId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type SocialAccountUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  version?: Prisma.IntFieldUpdateOperationsInput | number
  provider?: Prisma.EnumSocialAccountProviderFieldUpdateOperationsInput | $Enums.SocialAccountProvider
  providerId?: Prisma.StringFieldUpdateOperationsInput | string
  accountId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type SocialAccountListRelationFilter = {
  every?: Prisma.SocialAccountWhereInput
  some?: Prisma.SocialAccountWhereInput
  none?: Prisma.SocialAccountWhereInput
}

export type SocialAccountOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type SocialAccountProviderProviderIdCompoundUniqueInput = {
  provider: $Enums.SocialAccountProvider
  providerId: string
}

export type SocialAccountCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  version?: Prisma.SortOrder
  provider?: Prisma.SortOrder
  providerId?: Prisma.SortOrder
  accountId?: Prisma.SortOrder
}

export type SocialAccountAvgOrderByAggregateInput = {
  version?: Prisma.SortOrder
}

export type SocialAccountMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  version?: Prisma.SortOrder
  provider?: Prisma.SortOrder
  providerId?: Prisma.SortOrder
  accountId?: Prisma.SortOrder
}

export type SocialAccountMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  version?: Prisma.SortOrder
  provider?: Prisma.SortOrder
  providerId?: Prisma.SortOrder
  accountId?: Prisma.SortOrder
}

export type SocialAccountSumOrderByAggregateInput = {
  version?: Prisma.SortOrder
}

export type SocialAccountCreateNestedManyWithoutAccountInput = {
  create?: Prisma.XOR<Prisma.SocialAccountCreateWithoutAccountInput, Prisma.SocialAccountUncheckedCreateWithoutAccountInput> | Prisma.SocialAccountCreateWithoutAccountInput[] | Prisma.SocialAccountUncheckedCreateWithoutAccountInput[]
  connectOrCreate?: Prisma.SocialAccountCreateOrConnectWithoutAccountInput | Prisma.SocialAccountCreateOrConnectWithoutAccountInput[]
  createMany?: Prisma.SocialAccountCreateManyAccountInputEnvelope
  connect?: Prisma.SocialAccountWhereUniqueInput | Prisma.SocialAccountWhereUniqueInput[]
}

export type SocialAccountUncheckedCreateNestedManyWithoutAccountInput = {
  create?: Prisma.XOR<Prisma.SocialAccountCreateWithoutAccountInput, Prisma.SocialAccountUncheckedCreateWithoutAccountInput> | Prisma.SocialAccountCreateWithoutAccountInput[] | Prisma.SocialAccountUncheckedCreateWithoutAccountInput[]
  connectOrCreate?: Prisma.SocialAccountCreateOrConnectWithoutAccountInput | Prisma.SocialAccountCreateOrConnectWithoutAccountInput[]
  createMany?: Prisma.SocialAccountCreateManyAccountInputEnvelope
  connect?: Prisma.SocialAccountWhereUniqueInput | Prisma.SocialAccountWhereUniqueInput[]
}

export type SocialAccountUpdateManyWithoutAccountNestedInput = {
  create?: Prisma.XOR<Prisma.SocialAccountCreateWithoutAccountInput, Prisma.SocialAccountUncheckedCreateWithoutAccountInput> | Prisma.SocialAccountCreateWithoutAccountInput[] | Prisma.SocialAccountUncheckedCreateWithoutAccountInput[]
  connectOrCreate?: Prisma.SocialAccountCreateOrConnectWithoutAccountInput | Prisma.SocialAccountCreateOrConnectWithoutAccountInput[]
  upsert?: Prisma.SocialAccountUpsertWithWhereUniqueWithoutAccountInput | Prisma.SocialAccountUpsertWithWhereUniqueWithoutAccountInput[]
  createMany?: Prisma.SocialAccountCreateManyAccountInputEnvelope
  set?: Prisma.SocialAccountWhereUniqueInput | Prisma.SocialAccountWhereUniqueInput[]
  disconnect?: Prisma.SocialAccountWhereUniqueInput | Prisma.SocialAccountWhereUniqueInput[]
  delete?: Prisma.SocialAccountWhereUniqueInput | Prisma.SocialAccountWhereUniqueInput[]
  connect?: Prisma.SocialAccountWhereUniqueInput | Prisma.SocialAccountWhereUniqueInput[]
  update?: Prisma.SocialAccountUpdateWithWhereUniqueWithoutAccountInput | Prisma.SocialAccountUpdateWithWhereUniqueWithoutAccountInput[]
  updateMany?: Prisma.SocialAccountUpdateManyWithWhereWithoutAccountInput | Prisma.SocialAccountUpdateManyWithWhereWithoutAccountInput[]
  deleteMany?: Prisma.SocialAccountScalarWhereInput | Prisma.SocialAccountScalarWhereInput[]
}

export type SocialAccountUncheckedUpdateManyWithoutAccountNestedInput = {
  create?: Prisma.XOR<Prisma.SocialAccountCreateWithoutAccountInput, Prisma.SocialAccountUncheckedCreateWithoutAccountInput> | Prisma.SocialAccountCreateWithoutAccountInput[] | Prisma.SocialAccountUncheckedCreateWithoutAccountInput[]
  connectOrCreate?: Prisma.SocialAccountCreateOrConnectWithoutAccountInput | Prisma.SocialAccountCreateOrConnectWithoutAccountInput[]
  upsert?: Prisma.SocialAccountUpsertWithWhereUniqueWithoutAccountInput | Prisma.SocialAccountUpsertWithWhereUniqueWithoutAccountInput[]
  createMany?: Prisma.SocialAccountCreateManyAccountInputEnvelope
  set?: Prisma.SocialAccountWhereUniqueInput | Prisma.SocialAccountWhereUniqueInput[]
  disconnect?: Prisma.SocialAccountWhereUniqueInput | Prisma.SocialAccountWhereUniqueInput[]
  delete?: Prisma.SocialAccountWhereUniqueInput | Prisma.SocialAccountWhereUniqueInput[]
  connect?: Prisma.SocialAccountWhereUniqueInput | Prisma.SocialAccountWhereUniqueInput[]
  update?: Prisma.SocialAccountUpdateWithWhereUniqueWithoutAccountInput | Prisma.SocialAccountUpdateWithWhereUniqueWithoutAccountInput[]
  updateMany?: Prisma.SocialAccountUpdateManyWithWhereWithoutAccountInput | Prisma.SocialAccountUpdateManyWithWhereWithoutAccountInput[]
  deleteMany?: Prisma.SocialAccountScalarWhereInput | Prisma.SocialAccountScalarWhereInput[]
}

export type EnumSocialAccountProviderFieldUpdateOperationsInput = {
  set?: $Enums.SocialAccountProvider
}

export type SocialAccountCreateWithoutAccountInput = {
  id?: string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  version?: number
  provider: $Enums.SocialAccountProvider
  providerId: string
}

export type SocialAccountUncheckedCreateWithoutAccountInput = {
  id?: string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  version?: number
  provider: $Enums.SocialAccountProvider
  providerId: string
}

export type SocialAccountCreateOrConnectWithoutAccountInput = {
  where: Prisma.SocialAccountWhereUniqueInput
  create: Prisma.XOR<Prisma.SocialAccountCreateWithoutAccountInput, Prisma.SocialAccountUncheckedCreateWithoutAccountInput>
}

export type SocialAccountCreateManyAccountInputEnvelope = {
  data: Prisma.SocialAccountCreateManyAccountInput | Prisma.SocialAccountCreateManyAccountInput[]
  skipDuplicates?: boolean
}

export type SocialAccountUpsertWithWhereUniqueWithoutAccountInput = {
  where: Prisma.SocialAccountWhereUniqueInput
  update: Prisma.XOR<Prisma.SocialAccountUpdateWithoutAccountInput, Prisma.SocialAccountUncheckedUpdateWithoutAccountInput>
  create: Prisma.XOR<Prisma.SocialAccountCreateWithoutAccountInput, Prisma.SocialAccountUncheckedCreateWithoutAccountInput>
}

export type SocialAccountUpdateWithWhereUniqueWithoutAccountInput = {
  where: Prisma.SocialAccountWhereUniqueInput
  data: Prisma.XOR<Prisma.SocialAccountUpdateWithoutAccountInput, Prisma.SocialAccountUncheckedUpdateWithoutAccountInput>
}

export type SocialAccountUpdateManyWithWhereWithoutAccountInput = {
  where: Prisma.SocialAccountScalarWhereInput
  data: Prisma.XOR<Prisma.SocialAccountUpdateManyMutationInput, Prisma.SocialAccountUncheckedUpdateManyWithoutAccountInput>
}

export type SocialAccountScalarWhereInput = {
  AND?: Prisma.SocialAccountScalarWhereInput | Prisma.SocialAccountScalarWhereInput[]
  OR?: Prisma.SocialAccountScalarWhereInput[]
  NOT?: Prisma.SocialAccountScalarWhereInput | Prisma.SocialAccountScalarWhereInput[]
  id?: Prisma.StringFilter<"SocialAccount"> | string
  isActive?: Prisma.BoolFilter<"SocialAccount"> | boolean
  createdAt?: Prisma.DateTimeFilter<"SocialAccount"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"SocialAccount"> | Date | string
  version?: Prisma.IntFilter<"SocialAccount"> | number
  provider?: Prisma.EnumSocialAccountProviderFilter<"SocialAccount"> | $Enums.SocialAccountProvider
  providerId?: Prisma.StringFilter<"SocialAccount"> | string
  accountId?: Prisma.StringFilter<"SocialAccount"> | string
}

export type SocialAccountCreateManyAccountInput = {
  id?: string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  version?: number
  provider: $Enums.SocialAccountProvider
  providerId: string
}

export type SocialAccountUpdateWithoutAccountInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  version?: Prisma.IntFieldUpdateOperationsInput | number
  provider?: Prisma.EnumSocialAccountProviderFieldUpdateOperationsInput | $Enums.SocialAccountProvider
  providerId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type SocialAccountUncheckedUpdateWithoutAccountInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  version?: Prisma.IntFieldUpdateOperationsInput | number
  provider?: Prisma.EnumSocialAccountProviderFieldUpdateOperationsInput | $Enums.SocialAccountProvider
  providerId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type SocialAccountUncheckedUpdateManyWithoutAccountInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  version?: Prisma.IntFieldUpdateOperationsInput | number
  provider?: Prisma.EnumSocialAccountProviderFieldUpdateOperationsInput | $Enums.SocialAccountProvider
  providerId?: Prisma.StringFieldUpdateOperationsInput | string
}



export type SocialAccountSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  isActive?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  version?: boolean
  provider?: boolean
  providerId?: boolean
  accountId?: boolean
  account?: boolean | Prisma.AccountDefaultArgs<ExtArgs>
}, ExtArgs["result"]["socialAccount"]>

export type SocialAccountSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  isActive?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  version?: boolean
  provider?: boolean
  providerId?: boolean
  accountId?: boolean
  account?: boolean | Prisma.AccountDefaultArgs<ExtArgs>
}, ExtArgs["result"]["socialAccount"]>

export type SocialAccountSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  isActive?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  version?: boolean
  provider?: boolean
  providerId?: boolean
  accountId?: boolean
  account?: boolean | Prisma.AccountDefaultArgs<ExtArgs>
}, ExtArgs["result"]["socialAccount"]>

export type SocialAccountSelectScalar = {
  id?: boolean
  isActive?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  version?: boolean
  provider?: boolean
  providerId?: boolean
  accountId?: boolean
}

export type SocialAccountOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "isActive" | "createdAt" | "updatedAt" | "version" | "provider" | "providerId" | "accountId", ExtArgs["result"]["socialAccount"]>
export type SocialAccountInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  account?: boolean | Prisma.AccountDefaultArgs<ExtArgs>
}
export type SocialAccountIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  account?: boolean | Prisma.AccountDefaultArgs<ExtArgs>
}
export type SocialAccountIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  account?: boolean | Prisma.AccountDefaultArgs<ExtArgs>
}

export type $SocialAccountPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "SocialAccount"
  objects: {
    account: Prisma.$AccountPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    version: number
    provider: $Enums.SocialAccountProvider
    providerId: string
    accountId: string
  }, ExtArgs["result"]["socialAccount"]>
  composites: {}
}

export type SocialAccountGetPayload<S extends boolean | null | undefined | SocialAccountDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$SocialAccountPayload, S>

export type SocialAccountCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<SocialAccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SocialAccountCountAggregateInputType | true
  }

export interface SocialAccountDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SocialAccount'], meta: { name: 'SocialAccount' } }
  /**
   * Find zero or one SocialAccount that matches the filter.
   * @param {SocialAccountFindUniqueArgs} args - Arguments to find a SocialAccount
   * @example
   * // Get one SocialAccount
   * const socialAccount = await prisma.socialAccount.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SocialAccountFindUniqueArgs>(args: Prisma.SelectSubset<T, SocialAccountFindUniqueArgs<ExtArgs>>): Prisma.Prisma__SocialAccountClient<runtime.Types.Result.GetResult<Prisma.$SocialAccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one SocialAccount that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SocialAccountFindUniqueOrThrowArgs} args - Arguments to find a SocialAccount
   * @example
   * // Get one SocialAccount
   * const socialAccount = await prisma.socialAccount.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SocialAccountFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, SocialAccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__SocialAccountClient<runtime.Types.Result.GetResult<Prisma.$SocialAccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SocialAccount that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SocialAccountFindFirstArgs} args - Arguments to find a SocialAccount
   * @example
   * // Get one SocialAccount
   * const socialAccount = await prisma.socialAccount.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SocialAccountFindFirstArgs>(args?: Prisma.SelectSubset<T, SocialAccountFindFirstArgs<ExtArgs>>): Prisma.Prisma__SocialAccountClient<runtime.Types.Result.GetResult<Prisma.$SocialAccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SocialAccount that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SocialAccountFindFirstOrThrowArgs} args - Arguments to find a SocialAccount
   * @example
   * // Get one SocialAccount
   * const socialAccount = await prisma.socialAccount.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SocialAccountFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, SocialAccountFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__SocialAccountClient<runtime.Types.Result.GetResult<Prisma.$SocialAccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more SocialAccounts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SocialAccountFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all SocialAccounts
   * const socialAccounts = await prisma.socialAccount.findMany()
   * 
   * // Get first 10 SocialAccounts
   * const socialAccounts = await prisma.socialAccount.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const socialAccountWithIdOnly = await prisma.socialAccount.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends SocialAccountFindManyArgs>(args?: Prisma.SelectSubset<T, SocialAccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SocialAccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a SocialAccount.
   * @param {SocialAccountCreateArgs} args - Arguments to create a SocialAccount.
   * @example
   * // Create one SocialAccount
   * const SocialAccount = await prisma.socialAccount.create({
   *   data: {
   *     // ... data to create a SocialAccount
   *   }
   * })
   * 
   */
  create<T extends SocialAccountCreateArgs>(args: Prisma.SelectSubset<T, SocialAccountCreateArgs<ExtArgs>>): Prisma.Prisma__SocialAccountClient<runtime.Types.Result.GetResult<Prisma.$SocialAccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many SocialAccounts.
   * @param {SocialAccountCreateManyArgs} args - Arguments to create many SocialAccounts.
   * @example
   * // Create many SocialAccounts
   * const socialAccount = await prisma.socialAccount.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends SocialAccountCreateManyArgs>(args?: Prisma.SelectSubset<T, SocialAccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many SocialAccounts and returns the data saved in the database.
   * @param {SocialAccountCreateManyAndReturnArgs} args - Arguments to create many SocialAccounts.
   * @example
   * // Create many SocialAccounts
   * const socialAccount = await prisma.socialAccount.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many SocialAccounts and only return the `id`
   * const socialAccountWithIdOnly = await prisma.socialAccount.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends SocialAccountCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, SocialAccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SocialAccountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a SocialAccount.
   * @param {SocialAccountDeleteArgs} args - Arguments to delete one SocialAccount.
   * @example
   * // Delete one SocialAccount
   * const SocialAccount = await prisma.socialAccount.delete({
   *   where: {
   *     // ... filter to delete one SocialAccount
   *   }
   * })
   * 
   */
  delete<T extends SocialAccountDeleteArgs>(args: Prisma.SelectSubset<T, SocialAccountDeleteArgs<ExtArgs>>): Prisma.Prisma__SocialAccountClient<runtime.Types.Result.GetResult<Prisma.$SocialAccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one SocialAccount.
   * @param {SocialAccountUpdateArgs} args - Arguments to update one SocialAccount.
   * @example
   * // Update one SocialAccount
   * const socialAccount = await prisma.socialAccount.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends SocialAccountUpdateArgs>(args: Prisma.SelectSubset<T, SocialAccountUpdateArgs<ExtArgs>>): Prisma.Prisma__SocialAccountClient<runtime.Types.Result.GetResult<Prisma.$SocialAccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more SocialAccounts.
   * @param {SocialAccountDeleteManyArgs} args - Arguments to filter SocialAccounts to delete.
   * @example
   * // Delete a few SocialAccounts
   * const { count } = await prisma.socialAccount.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends SocialAccountDeleteManyArgs>(args?: Prisma.SelectSubset<T, SocialAccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more SocialAccounts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SocialAccountUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many SocialAccounts
   * const socialAccount = await prisma.socialAccount.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends SocialAccountUpdateManyArgs>(args: Prisma.SelectSubset<T, SocialAccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more SocialAccounts and returns the data updated in the database.
   * @param {SocialAccountUpdateManyAndReturnArgs} args - Arguments to update many SocialAccounts.
   * @example
   * // Update many SocialAccounts
   * const socialAccount = await prisma.socialAccount.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more SocialAccounts and only return the `id`
   * const socialAccountWithIdOnly = await prisma.socialAccount.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends SocialAccountUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, SocialAccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SocialAccountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one SocialAccount.
   * @param {SocialAccountUpsertArgs} args - Arguments to update or create a SocialAccount.
   * @example
   * // Update or create a SocialAccount
   * const socialAccount = await prisma.socialAccount.upsert({
   *   create: {
   *     // ... data to create a SocialAccount
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the SocialAccount we want to update
   *   }
   * })
   */
  upsert<T extends SocialAccountUpsertArgs>(args: Prisma.SelectSubset<T, SocialAccountUpsertArgs<ExtArgs>>): Prisma.Prisma__SocialAccountClient<runtime.Types.Result.GetResult<Prisma.$SocialAccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of SocialAccounts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SocialAccountCountArgs} args - Arguments to filter SocialAccounts to count.
   * @example
   * // Count the number of SocialAccounts
   * const count = await prisma.socialAccount.count({
   *   where: {
   *     // ... the filter for the SocialAccounts we want to count
   *   }
   * })
  **/
  count<T extends SocialAccountCountArgs>(
    args?: Prisma.Subset<T, SocialAccountCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SocialAccountCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a SocialAccount.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SocialAccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SocialAccountAggregateArgs>(args: Prisma.Subset<T, SocialAccountAggregateArgs>): Prisma.PrismaPromise<GetSocialAccountAggregateType<T>>

  /**
   * Group by SocialAccount.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SocialAccountGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends SocialAccountGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SocialAccountGroupByArgs['orderBy'] }
      : { orderBy?: SocialAccountGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, SocialAccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSocialAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the SocialAccount model
 */
readonly fields: SocialAccountFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for SocialAccount.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SocialAccountClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  account<T extends Prisma.AccountDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AccountDefaultArgs<ExtArgs>>): Prisma.Prisma__AccountClient<runtime.Types.Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the SocialAccount model
 */
export interface SocialAccountFieldRefs {
  readonly id: Prisma.FieldRef<"SocialAccount", 'String'>
  readonly isActive: Prisma.FieldRef<"SocialAccount", 'Boolean'>
  readonly createdAt: Prisma.FieldRef<"SocialAccount", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"SocialAccount", 'DateTime'>
  readonly version: Prisma.FieldRef<"SocialAccount", 'Int'>
  readonly provider: Prisma.FieldRef<"SocialAccount", 'SocialAccountProvider'>
  readonly providerId: Prisma.FieldRef<"SocialAccount", 'String'>
  readonly accountId: Prisma.FieldRef<"SocialAccount", 'String'>
}
    

// Custom InputTypes
/**
 * SocialAccount findUnique
 */
export type SocialAccountFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SocialAccount
   */
  select?: Prisma.SocialAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SocialAccount
   */
  omit?: Prisma.SocialAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SocialAccountInclude<ExtArgs> | null
  /**
   * Filter, which SocialAccount to fetch.
   */
  where: Prisma.SocialAccountWhereUniqueInput
}

/**
 * SocialAccount findUniqueOrThrow
 */
export type SocialAccountFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SocialAccount
   */
  select?: Prisma.SocialAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SocialAccount
   */
  omit?: Prisma.SocialAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SocialAccountInclude<ExtArgs> | null
  /**
   * Filter, which SocialAccount to fetch.
   */
  where: Prisma.SocialAccountWhereUniqueInput
}

/**
 * SocialAccount findFirst
 */
export type SocialAccountFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SocialAccount
   */
  select?: Prisma.SocialAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SocialAccount
   */
  omit?: Prisma.SocialAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SocialAccountInclude<ExtArgs> | null
  /**
   * Filter, which SocialAccount to fetch.
   */
  where?: Prisma.SocialAccountWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SocialAccounts to fetch.
   */
  orderBy?: Prisma.SocialAccountOrderByWithRelationInput | Prisma.SocialAccountOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SocialAccounts.
   */
  cursor?: Prisma.SocialAccountWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SocialAccounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SocialAccounts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SocialAccounts.
   */
  distinct?: Prisma.SocialAccountScalarFieldEnum | Prisma.SocialAccountScalarFieldEnum[]
}

/**
 * SocialAccount findFirstOrThrow
 */
export type SocialAccountFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SocialAccount
   */
  select?: Prisma.SocialAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SocialAccount
   */
  omit?: Prisma.SocialAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SocialAccountInclude<ExtArgs> | null
  /**
   * Filter, which SocialAccount to fetch.
   */
  where?: Prisma.SocialAccountWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SocialAccounts to fetch.
   */
  orderBy?: Prisma.SocialAccountOrderByWithRelationInput | Prisma.SocialAccountOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SocialAccounts.
   */
  cursor?: Prisma.SocialAccountWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SocialAccounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SocialAccounts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SocialAccounts.
   */
  distinct?: Prisma.SocialAccountScalarFieldEnum | Prisma.SocialAccountScalarFieldEnum[]
}

/**
 * SocialAccount findMany
 */
export type SocialAccountFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SocialAccount
   */
  select?: Prisma.SocialAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SocialAccount
   */
  omit?: Prisma.SocialAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SocialAccountInclude<ExtArgs> | null
  /**
   * Filter, which SocialAccounts to fetch.
   */
  where?: Prisma.SocialAccountWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SocialAccounts to fetch.
   */
  orderBy?: Prisma.SocialAccountOrderByWithRelationInput | Prisma.SocialAccountOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing SocialAccounts.
   */
  cursor?: Prisma.SocialAccountWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SocialAccounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SocialAccounts.
   */
  skip?: number
  distinct?: Prisma.SocialAccountScalarFieldEnum | Prisma.SocialAccountScalarFieldEnum[]
}

/**
 * SocialAccount create
 */
export type SocialAccountCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SocialAccount
   */
  select?: Prisma.SocialAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SocialAccount
   */
  omit?: Prisma.SocialAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SocialAccountInclude<ExtArgs> | null
  /**
   * The data needed to create a SocialAccount.
   */
  data: Prisma.XOR<Prisma.SocialAccountCreateInput, Prisma.SocialAccountUncheckedCreateInput>
}

/**
 * SocialAccount createMany
 */
export type SocialAccountCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many SocialAccounts.
   */
  data: Prisma.SocialAccountCreateManyInput | Prisma.SocialAccountCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * SocialAccount createManyAndReturn
 */
export type SocialAccountCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SocialAccount
   */
  select?: Prisma.SocialAccountSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the SocialAccount
   */
  omit?: Prisma.SocialAccountOmit<ExtArgs> | null
  /**
   * The data used to create many SocialAccounts.
   */
  data: Prisma.SocialAccountCreateManyInput | Prisma.SocialAccountCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SocialAccountIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * SocialAccount update
 */
export type SocialAccountUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SocialAccount
   */
  select?: Prisma.SocialAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SocialAccount
   */
  omit?: Prisma.SocialAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SocialAccountInclude<ExtArgs> | null
  /**
   * The data needed to update a SocialAccount.
   */
  data: Prisma.XOR<Prisma.SocialAccountUpdateInput, Prisma.SocialAccountUncheckedUpdateInput>
  /**
   * Choose, which SocialAccount to update.
   */
  where: Prisma.SocialAccountWhereUniqueInput
}

/**
 * SocialAccount updateMany
 */
export type SocialAccountUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update SocialAccounts.
   */
  data: Prisma.XOR<Prisma.SocialAccountUpdateManyMutationInput, Prisma.SocialAccountUncheckedUpdateManyInput>
  /**
   * Filter which SocialAccounts to update
   */
  where?: Prisma.SocialAccountWhereInput
  /**
   * Limit how many SocialAccounts to update.
   */
  limit?: number
}

/**
 * SocialAccount updateManyAndReturn
 */
export type SocialAccountUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SocialAccount
   */
  select?: Prisma.SocialAccountSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the SocialAccount
   */
  omit?: Prisma.SocialAccountOmit<ExtArgs> | null
  /**
   * The data used to update SocialAccounts.
   */
  data: Prisma.XOR<Prisma.SocialAccountUpdateManyMutationInput, Prisma.SocialAccountUncheckedUpdateManyInput>
  /**
   * Filter which SocialAccounts to update
   */
  where?: Prisma.SocialAccountWhereInput
  /**
   * Limit how many SocialAccounts to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SocialAccountIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * SocialAccount upsert
 */
export type SocialAccountUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SocialAccount
   */
  select?: Prisma.SocialAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SocialAccount
   */
  omit?: Prisma.SocialAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SocialAccountInclude<ExtArgs> | null
  /**
   * The filter to search for the SocialAccount to update in case it exists.
   */
  where: Prisma.SocialAccountWhereUniqueInput
  /**
   * In case the SocialAccount found by the `where` argument doesn't exist, create a new SocialAccount with this data.
   */
  create: Prisma.XOR<Prisma.SocialAccountCreateInput, Prisma.SocialAccountUncheckedCreateInput>
  /**
   * In case the SocialAccount was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SocialAccountUpdateInput, Prisma.SocialAccountUncheckedUpdateInput>
}

/**
 * SocialAccount delete
 */
export type SocialAccountDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SocialAccount
   */
  select?: Prisma.SocialAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SocialAccount
   */
  omit?: Prisma.SocialAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SocialAccountInclude<ExtArgs> | null
  /**
   * Filter which SocialAccount to delete.
   */
  where: Prisma.SocialAccountWhereUniqueInput
}

/**
 * SocialAccount deleteMany
 */
export type SocialAccountDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SocialAccounts to delete
   */
  where?: Prisma.SocialAccountWhereInput
  /**
   * Limit how many SocialAccounts to delete.
   */
  limit?: number
}

/**
 * SocialAccount without action
 */
export type SocialAccountDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SocialAccount
   */
  select?: Prisma.SocialAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SocialAccount
   */
  omit?: Prisma.SocialAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SocialAccountInclude<ExtArgs> | null
}
