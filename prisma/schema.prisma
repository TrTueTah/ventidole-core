generator client {
  provider = "prisma-client"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id              String          @id @default(cuid())
  isActive        Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  version         Int             @default(0)
  name            String?         @db.VarChar(255)
  email           String          @unique(map: "accounts_email_unique_partial") @db.VarChar(255)
  phoneNumber     String?         @db.VarChar(255)
  password        String          @db.VarChar(255)
  role            Role
  deviceToken     String?         @db.VarChar(255)
  isDeleted       Boolean         @default(false) @map("is_deleted")
  isOnline        Boolean         @default(false) @map("is_online")
  social_accounts SocialAccount[]
  verifications   Verification[]

  @@map("accounts")
}

model Verification {
  id          String           @id @default(cuid())
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  version     Int              @default(0)
  type        VerificationType
  token       String           @unique
  expiresAt   DateTime         @map("expires_at")
  accountId   String?          @map("accountId")
  usedAt      DateTime?        @map("used_at")
  confirmedAt DateTime?        @map("confirmed_at")
  email       String?          @db.VarChar(255)
  account     Account?         @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([accountId])
  @@index([expiresAt])
  @@map("verifications")
}

model SocialAccount {
  id         String                @id @default(cuid())
  isActive   Boolean               @default(true)
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt
  version    Int                   @default(0)
  provider   SocialAccountProvider
  providerId String                @map("provider_id")
  accountId  String                @map("user_id")
  account    Account               @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@index([accountId])
  @@map("social_accounts")
}

enum Role {
  FAN
  ADMIN
  IDOL
}

enum VerificationType {
  FIND_EMAIL
  RESET_PASSWORD
  REGISTER_ACCOUNT
  UPDATE_PROFILE
}

enum SocialAccountProvider {
  GOOGLE
  FACEBOOK
}
